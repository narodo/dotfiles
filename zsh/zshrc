# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH:$HOME/tools/bin:$HOME/.local/bin

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="naro"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
 ZSH_CUSTOM="$HOME/.oh-my-zsh/custom"

 function addPluginGit() {
     # $1: plugin name
     # $2: plugin github url
    if [[ ! -d $ZSH_CUSTOM/plugins/$1 ]]; then
      git clone https://github.com/$2 $ZSH_CUSTOM/plugins/$1
    fi
 }

addPluginGit "zsh-autopair" "hlissner/zsh-autopair"
addPluginGit "zsh-autocomplete" "marlonrichert/zsh-autocomplete"
addPluginGit "zsh-fzf-history-search" "joshskidmore/zsh-fzf-history-search"

plugins=(
    git
    zsh-autosuggestions
    zsh-syntax-highlighting
    fzf
    zsh-fzf-history-search
    zsh-autopair
)
source $ZSH/oh-my-zsh.sh

export EDITOR="nvim"

setopt no_share_history

# do local fixup
if [ -f $HOME/.zshrc.fixup ]; then
    source $HOME/.zshrc.fixup
fi

# Init plugins
zstyle ':completion:*' menu select

# use the vi navigation keys in menu completion
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Keybindings
bindkey -v
bindkey '^R' fzf_history_search
bindkey jj vi-cmd-mode
bindkey '^ ' autosuggest-accept

autopair-init

# custom functions
adbdeviceFunc() {
    if [[ $1 == "cv" ]]; then
        echo "Looking for CV device"
        dev_sn="$(adb devices | grep _cv | head -1 | awk '{print $1}')"
    else
        echo "Looking for APP devices"
        dev_sn="$(adb devices | grep _app | head -1 | awk '{print $1}')"
    fi

    if [[ $dev_sn == "" ]]; then
        echo "Device not found!"
        exit 1
    else
        echo "Device $dev_sn found, setting ANDROID_SERIAL env"
        export ANDROID_SERIAL=$dev_sn
    fi
}

fcd() {
    dir=$(fdfind . -t d $1 | fzf --height=80% --border=sharp \
    --preview='tree -L 1 -C {}' --preview-window='45%,border-sharp' \
    --prompt='Dirs > ')
    if [ ! -z "$dir" ]; then
        cd $dir
    fi
}

ffind() {
    export FZF_TEMP_TARGETDIR=$1

    file=$(fdfind . -t f $FZF_TEMP_TARGETDIR | fzf --multi --height=80% --border=sharp \
    --preview='cat {}' --preview-window='45%,border-sharp' \
    --prompt='Files > ' \
    --bind='ctrl-d:change-prompt(Dirs > )' \
    --bind='ctrl-d:+reload(fdfind . -t d $FZF_TEMP_TARGETDIR)' \
    --bind='ctrl-d:+change-preview(tree -C {})' \
    --bind='ctrl-d:+refresh-preview' \
    --bind='ctrl-f:change-prompt(Files > )' \
    --bind='ctrl-f:+reload(fdfind . -t f $FZF_TEMP_TARGETDIR)' \
    --bind='ctrl-f:+change-preview(cat {})' \
    --bind='ctrl-f:+refresh-preview' \
    )
    echo $file
}

autoload adbdeviceFunc

alias fd="fdfind"
alias ff="ffind"

alias adbApp="adbdeviceFunc app"
alias adbCv="adbdeviceFunc cv"
alias adbRR="adb root && adb remount"

alias gitBc="git branch --show-current"
alias gitLp="git log --pretty=oneline"


